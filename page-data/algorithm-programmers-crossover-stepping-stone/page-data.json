{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algorithm-programmers-crossover-stepping-stone/",
    "result": {"data":{"cur":{"id":"7db98ebe-9eef-50b2-9168-4ca138d982f9","html":"<h2 id=\"️문제\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\" aria-label=\"️문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>✏️</strong> 문제</h2>\n<hr>\n<p><strong>[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]</strong></p>\n<p>카카오 초등학교의 “니니즈 친구들”이 “라이언” 선생님과 함께 가을 소풍을 가는 중에 <strong>징검다리</strong>가 있는 개울을 만나서 건너편으로 건너려고 합니다. “라이언” 선생님은 “니니즈 친구들”이 무사히 징검다리를 건널 수 있도록 다음과 같이 규칙을 만들었습니다.</p>\n<ul>\n<li>징검다리는 일렬로 놓여 있고 각 징검다리의 디딤돌에는 모두 숫자가 적혀 있으며 디딤돌의 숫자는 한 번 밟을 때마다 1씩 줄어듭니다.</li>\n<li>디딤돌의 숫자가 0이 되면 더 이상 밟을 수 없으며 이때는 그 다음 디딤돌로 한번에 여러 칸을 건너 뛸 수 있습니다.</li>\n<li>단, 다음으로 밟을 수 있는 디딤돌이 여러 개인 경우 무조건 가장 가까운 디딤돌로만 건너뛸 수 있습니다.</li>\n</ul>\n<p>“니니즈 친구들”은 개울의 왼쪽에 있으며, 개울의 오른쪽 건너편에 도착해야 징검다리를 건넌 것으로 인정합니다.”니니즈 친구들”은 한 번에 한 명씩 징검다리를 건너야 하며, 한 친구가 징검다리를 모두 건넌 후에 그 다음 친구가 건너기 시작합니다.</p>\n<p>디딤돌에 적힌 숫자가 순서대로 담긴 배열 stones와 한 번에 건너뛸 수 있는 디딤돌의 최대 칸수 k가 매개변수로 주어질 때, 최대 몇 명까지 징검다리를 건널 수 있는지 return 하도록 solution 함수를 완성해주세요.</p>\n<h3 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🚨</strong> 제한사항</h3>\n<ul>\n<li>징검다리를 건너야 하는 니니즈 친구들의 수는 무제한 이라고 간주합니다.</li>\n<li>stones 배열의 크기는 1 이상 200,000 이하입니다.</li>\n<li>stones 배열 각 원소들의 값은 1 이상 200,000,000 이하인 자연수입니다.</li>\n<li>k는 1 이상 stones의 길이 이하인 자연수입니다.</li>\n</ul>\n<h3 id=\"입출력-예시\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\" aria-label=\"입출력 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 입출력 예시</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th>stones</th>\n<th>k</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[2, 4, 5, 3, 2, 1, 4, 2, 5, 1]</td>\n<td>3</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤔</strong> 풀이 코드</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stones<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">let</span> low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> high <span class=\"token operator\">=</span> <span class=\"token number\">200000000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> check <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        stones<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stone</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stone<span class=\"token operator\">-</span>mid <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                check <span class=\"token operator\">=</span> check <span class=\"token operator\">&lt;</span> cnt <span class=\"token operator\">?</span> cnt <span class=\"token operator\">:</span> check<span class=\"token punctuation\">;</span>\n                cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n        check <span class=\"token operator\">=</span> check <span class=\"token operator\">&lt;</span> cnt <span class=\"token operator\">?</span> cnt <span class=\"token operator\">:</span> check<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            high <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            low <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> high<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이전 풀이</span>\n<span class=\"token comment\">// for(let i = 0; i &lt; stones.length-k+1; i++){</span>\n<span class=\"token comment\">//         let newArr = stones.slice(i,i+k);</span>\n<span class=\"token comment\">//         let max = Math.max(...newArr);</span>\n<span class=\"token comment\">//         answer = answer > max ? max : answer;</span>\n<span class=\"token comment\">//     }</span></code></pre></div>\n<h2 id=\"나의-풀이과정\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\" aria-label=\"나의 풀이과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😼 나의 풀이과정</h2>\n<hr>\n<p>처음에는 k간격만큼 잘라서 그 중에서 나오는 최대값들 중 최소값을 찾았습니다. 이렇게 푸니 시간이 너무 오래걸린다는 단점이 있었습니다. 그래서 다시 해결하기 위해 찾아낸 방법은 <code class=\"language-text\">parametric search</code>를 이용하는 방법입니다. 이전의 선입선출 스케줄링 풀이와 비슷하게, 문제에서 최소와 최대값이 주어집니다. 이분 탐색 알고리즘을 사용하여 적절한 답을 찾아나가는 것입니다. 저는 그래서 최대 사람 수를 조절하면서 답을 찾아내었습니다. 최대 사람 수는 최소 <code class=\"language-text\">1,</code> 최대 <code class=\"language-text\">200000000</code>을 값으로 가질 수 있습니다. <code class=\"language-text\">low</code>값과 <code class=\"language-text\">high</code>값의 중간값인 <code class=\"language-text\">mid</code>로 <code class=\"language-text\">stone</code> 배열에서 <code class=\"language-text\">mid</code>로 빼서 음수 또는 0이 되는 일련의 값들의 길이가 <code class=\"language-text\">k</code>보다 크거나 같으면 <code class=\"language-text\">high</code>를 <code class=\"language-text\">mid</code>로 바꾸어주어 답을 <code class=\"language-text\">mid</code>보다 작거나 같은 것들 중에서 찾고, 아니면 <code class=\"language-text\">low</code>를  <code class=\"language-text\">mid+1</code>로 바꾸어주어 답을 <code class=\"language-text\">mid</code>보다 큰 값들 중에서 찾습니다.</p>\n<p>최종적으로 <code class=\"language-text\">high</code>와 low<code class=\"language-text\">가</code> 같아지면 while 문을 벗어나고, 답은 <code class=\"language-text\">high</code> 또는 <code class=\"language-text\">low</code>가 됩니다.</p>\n<h2 id=\"알게된-점\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\" aria-label=\"알게된 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 알게된 점</h2>\n<hr>\n<ul>\n<li>parametric search</li>\n<li>O(logN)</li>\n<li>이분탐색과의 차이는 결정문제인지 아닌지</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\"><strong>✏️</strong> 문제</a></p>\n<ul>\n<li><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\"><strong>🚨</strong> 제한사항</a></li>\n<li><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\">📌 입출력 예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\"><strong>🤔</strong> 풀이 코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\">😼 나의 풀이과정</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\">✨ 알게된 점</a></p>\n</li>\n</ul>\n</div>","excerpt":"✏️ 문제 [본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.] 카카오 초등학교의 “니니즈 친구들”이 “라이언” 선생님과 함께 가을 소풍을 가는 중에 징검다리가 있는 개울을 만나서 건너편으로 건너려고 합니다. “라이언” 선생님은 “니니즈 친구들”이 무사히 징검다리를 건널 수 있도록 다음과 같이 규칙을 만들었습니다. 징검다리는 일렬로 놓여 있고 각 징검다리의 디딤돌에는 모두 숫자가 적혀 있으며 디딤돌의 숫자는 한 번 밟을 때마다 1씩 줄어듭니다. 디딤돌의 숫자가 0이 되면 더 이상 밟을 수 없으며 이때는 그 다음 디딤돌로 한번에 여러 칸을 건너 뛸 수 있습니다. 단, 다음으로 밟을 수 있는 디딤돌이 여러 개인 경우 무조건 가장 가까운 디딤돌로만 건너뛸 수 있습니다. “니니즈 친구들”은 개울의 왼쪽에 있으며, 개울의 오른쪽 건너편에 도착해야 징검다리를 건넌 것으로 인정합니다.”니니즈 친구들”은 한 번에 한 명씩 징검다리를 건너야 하며, 한 친구가 징검다리를 모두 건넌 후에…","frontmatter":{"date":"January 26, 2022","title":"[프로그래머스] 징검다리 건너기 풀이","categories":"algorithm","author":"얌얌냥이","emoji":"😈"},"fields":{"slug":"/algorithm-programmers-crossover-stepping-stone/"}},"next":{"id":"501e7383-f468-547e-8c98-aa89ed0abad8","html":"<h2 id=\"️문제\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\" aria-label=\"️문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>✏️</strong> 문제</h2>\n<hr>\n<p>처리해야 할 동일한 작업이 n 개가 있고, 이를 처리하기 위한 CPU가 있습니다.</p>\n<p>이 CPU는 다음과 같은 특징이 있습니다.</p>\n<ul>\n<li>CPU에는 여러 개의 코어가 있고, 코어별로 한 작업을 처리하는 시간이 다릅니다.</li>\n<li>한 코어에서 작업이 끝나면 작업이 없는 코어가 바로 다음 작업을 수행합니다.</li>\n<li>2개 이상의 코어가 남을 경우 앞의 코어부터 작업을 처리 합니다.</li>\n</ul>\n<p>처리해야 될 작업의 개수 n과, 각 코어의 처리시간이 담긴 배열 cores 가 매개변수로 주어질 때, 마지막 작업을 처리하는 코어의 번호를 return 하는 solution 함수를 완성해주세요.</p>\n<h3 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🚨</strong> 제한사항</h3>\n<ul>\n<li>코어의 수는 10,000 이하 2이상 입니다.</li>\n<li>코어당 작업을 처리하는 시간은 10,000이하 입니다.</li>\n<li>처리해야 하는 일의 개수는 50,000개를 넘기지 않습니다.</li>\n</ul>\n<h3 id=\"입출력-예시\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\" aria-label=\"입출력 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 입출력 예시</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>cores</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6</td>\n<td>[1,2,3]</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤔</strong> 풀이 코드</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> cores</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> high <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>cores<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> check <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newN <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> cores<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cores<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span> \n    \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        check <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cores<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">core</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            check <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">/</span>core<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check <span class=\"token operator\">&lt;</span> newN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 넣을 수 있는 개수가 newN보다 작으면 time의 범위가 더 커져야 한다.</span>\n            low <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            high <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이때는 check가 더 커서 Time을 줄여주어야하는 경우.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cores<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">core</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        cnt <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>core<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cores<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>cores<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">===</span> newN<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"나의-풀이과정\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\" aria-label=\"나의 풀이과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😼 나의 풀이과정</h2>\n<hr>\n<p>처음에 풀었던 방식은 위 풀이와 비슷한 듯 달랐습니다. <code class=\"language-text\">n</code>이 들어가는 시간을 구하기 위해서 선형적으로 풀었습니다. <code class=\"language-text\">while</code>문을 돌면서 <code class=\"language-text\">time</code>을 더해가면서 그 시간까지 각각의 코어에 넣을 수 있는 개수를 배열로 가지고 있으면서 값을 갱신해나가는 식으로 했었습니다. <code class=\"language-text\">cores[i]</code>로 나눈 나머지가 <code class=\"language-text\">0</code>인 경우, 해당 시간에 그 코어에 작업을 할당시킬 수 있으므로 배열의 i번째 값을 <code class=\"language-text\">cores[i]</code>만큼 더해주었습니다. 그러다가 그 배열안의 모든 값의 합이 <code class=\"language-text\">n</code>과 같아질 때, 그때의 <code class=\"language-text\">i+1</code>이 답이 되었습니다. 이렇게 풀면 코드도 간단하고 이해하기도 좋았지만 효율성 테스트를 모두 통과하지 못했습니다.</p>\n<p>적절한 시간을 빠르게 찾아야 했습니다. 그래서 이분 탐색을 사용하였습니다. 찾고자 하는 <code class=\"language-text\">n</code>이 코어 배열의 크기보다 작으면 <code class=\"language-text\">n</code> 그 자체로 답이 됩니다. 이는 시간이 <code class=\"language-text\">0</code>일 때입니다. 그렇지 않으면 <code class=\"language-text\">n</code>에서 코어 배열의 크기를 뺀 개수 <code class=\"language-text\">(newN)</code>를 가지고 처리를 할 것입니다. <code class=\"language-text\">low</code>는 시간 <code class=\"language-text\">1</code>, <code class=\"language-text\">high</code>는 <code class=\"language-text\">최대로 걸릴 수 있는 시간</code>을 설정해두고 <code class=\"language-text\">low</code>와 <code class=\"language-text\">high</code>의 중간 값인 <code class=\"language-text\">mid</code> 시간을 사용합니다. 모든 코어가 걸릴 수 있는 작업 시간으로 <code class=\"language-text\">mid</code>를 나눈 몫을 다 더합니다. <code class=\"language-text\">(check)</code>. 이는 <code class=\"language-text\">mid</code>까지 모든 코어가 처리할 수 있는 작업의 개수를 뜻합니다. 이 개수가 <code class=\"language-text\">newN</code>보다 작으면 시간이 더 커져서 더 작업을 처리해야한다는 의미이므로 <code class=\"language-text\">low</code>를 <code class=\"language-text\">mid+1</code>로 갱신하여 뒤쪽 절반의 범위로 줄여 탐색합니다. <code class=\"language-text\">newN</code>보다 크면 시간이 너무 크다는 의미이므로 <code class=\"language-text\">high</code>를 <code class=\"language-text\">mid</code>로 줄여줍니다. 이 절차를 <code class=\"language-text\">low &lt; high</code> 일 때까지 반복을 합니다. <code class=\"language-text\">low</code>가 <code class=\"language-text\">high</code>와 같아지는 순간 <code class=\"language-text\">while</code>문에서 탈출할 것입니다. low 또는 <code class=\"language-text\">high</code>의 시간보다 <code class=\"language-text\">1시간 적을 때까지</code> 각 코어들이 처리할 수 있는 개수를 <code class=\"language-text\">cnt</code>에 저장하고, <code class=\"language-text\">low</code> 또는 <code class=\"language-text\">high</code>의 시간이 되었을 때, <code class=\"language-text\">low</code> 또는 <code class=\"language-text\">high</code>를 <code class=\"language-text\">cores[i]</code>로 나눈 나머지가 0이라면 작업을 할당할 수 있다는 의미이므로 <code class=\"language-text\">cnt</code>를 더해줍니다. <code class=\"language-text\">cnt</code>가 <code class=\"language-text\">newN</code>과 같아지면 그 때의 <code class=\"language-text\">i+1</code>을 답으로 리턴하도록 하였습니다.</p>\n<h2 id=\"알게된-점\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\" aria-label=\"알게된 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 알게된 점</h2>\n<hr>\n<ul>\n<li>이분 탐색을 이렇게도 활용할 수 있구나를 느낌</li>\n<li>선형적으로 풀지 못하면 분명 다른 길이 있음을 알아채야 함</li>\n<li>이분 탐색 인덱스 주의!</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\"><strong>✏️</strong> 문제</a></p>\n<ul>\n<li><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\"><strong>🚨</strong> 제한사항</a></li>\n<li><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\">📌 입출력 예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\"><strong>🤔</strong> 풀이 코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\">😼 나의 풀이과정</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\">✨ 알게된 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 19, 2022","title":"[프로그래머스] 선입 선출 스케줄링 풀이","categories":"algorithm","author":"얌얌냥이","emoji":"🤔"},"fields":{"slug":"/algorithm-programmers-FIFO-scheduling/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://yumyumnyang.github.io","comments":{"utterances":{"repo":"YumYumNyang/YumYumNyang.github.io"}}}}},"pageContext":{"slug":"/algorithm-programmers-crossover-stepping-stone/","nextSlug":"/algorithm-programmers-FIFO-scheduling/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}