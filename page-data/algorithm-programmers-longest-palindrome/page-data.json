{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algorithm-programmers-longest-palindrome/",
    "result": {"data":{"cur":{"id":"254618a1-1307-58a0-af52-a059a07c5a9f","html":"<h2 id=\"️문제\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\" aria-label=\"️문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>✏️</strong> 문제</h2>\n<hr>\n<p>앞뒤를 뒤집어도 똑같은 문자열을 팰린드롬(palindrome)이라고 합니다.문자열 s가 주어질 때, s의 부분문자열(Substring)중 가장 긴 팰린드롬의 길이를 return 하는 solution 함수를 완성해 주세요.</p>\n<p>예를들면, 문자열 s가 “abcdcba”이면 7을 return하고 “abacde”이면 3을 return합니다.</p>\n<h3 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🚨</strong> 제한사항</h3>\n<ul>\n<li>문자열 s의 길이 : 2,500 이하의 자연수</li>\n<li>문자열 s는 알파벳 소문자로만 구성</li>\n</ul>\n<h3 id=\"입출력-예시\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\" aria-label=\"입출력 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 입출력 예시</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>answer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“abcdcba”</td>\n<td>7</td>\n</tr>\n<tr>\n<td>“abacde”</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤔</strong> 풀이 코드</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            left<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        answer <span class=\"token operator\">=</span> answer <span class=\"token operator\">></span> right<span class=\"token operator\">-</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> answer <span class=\"token operator\">:</span> right<span class=\"token operator\">-</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        left <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        right <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            left<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        answer <span class=\"token operator\">=</span> answer <span class=\"token operator\">></span> right<span class=\"token operator\">-</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> answer <span class=\"token operator\">:</span> right<span class=\"token operator\">-</span>left<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"나의-풀이과정\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\" aria-label=\"나의 풀이과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😼 나의 풀이과정</h2>\n<hr>\n<p>먼저 팰린드롬이 되는 경우는 팰린드롬이 홀수개의 문자로 이루어진 경우와, 짝수개의 경우로 이루어진 경우가 있습니다. 두 경우를 나누어서 찾았습니다. 문자열 하나하나를 중간 문자로 만들어서 그 인덱스부터 왼쪽 오른쪽을 각각 빼고 더하면서 검사해나가도록 했습니다.</p>\n<h2 id=\"알게된-점\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\" aria-label=\"알게된 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 알게된 점</h2>\n<hr>\n<p>다른 방법은 없는지 생각해보기! DP로도 풀 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\"><strong>✏️</strong> 문제</a></p>\n<ul>\n<li><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\"><strong>🚨</strong> 제한사항</a></li>\n<li><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\">📌 입출력 예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\"><strong>🤔</strong> 풀이 코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\">😼 나의 풀이과정</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\">✨ 알게된 점</a></p>\n</li>\n</ul>\n</div>","excerpt":"✏️ 문제 앞뒤를 뒤집어도 똑같은 문자열을 팰린드롬(palindrome)이라고 합니다.문자열 s가 주어질 때, s의 부분문자열(Substring)중 가장 긴 팰린드롬의 길이를 return 하는 solution 함수를 완성해 주세요. 예를들면, 문자열 s가 “abcdcba”이면 7을 return하고 “abacde”이면 3을 return합니다. 🚨 제한사항 문자열 s의 길이 : 2,500 이하의 자연수 문자열 s는 알파벳 소문자로만 구성 📌 입출력 예시 s answer “abcdcba” 7 “abacde” 3 🤔 풀이 코드 😼 나의 풀이과정 먼저 팰린드롬이 되는 경우는 팰린드롬이 홀수개의 문자로 이루어진 경우와, 짝수개의 경우로 이루어진 경우가 있습니다. 두 경우를 나누어서 찾았습니다. 문자열 하나하나를 중간 문자로 만들어서 그 인덱스부터 왼쪽 오른쪽을 각각 빼고 더하면서 검사해나가도록 했습니다. ✨ 알게된 점 다른 방법은 없는지 생각해보기! DP로도 풀 수 있다. ✏️ 문제 🚨 제한사항…","frontmatter":{"date":"February 07, 2022","title":"[프로그래머스] 가장 긴 팰린드롬 풀이","categories":"algorithm","author":"얌얌냥이","emoji":"🐍"},"fields":{"slug":"/algorithm-programmers-longest-palindrome/"}},"next":{"id":"a317ea59-ee36-5043-9946-1387b8a9ff06","html":"<h2 id=\"자바스크립트의-스코프유효-범위\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84%EC%9C%A0%ED%9A%A8-%EB%B2%94%EC%9C%84\" aria-label=\"자바스크립트의 스코프유효 범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 스코프(유효 범위)</h2>\n<hr>\n<p>다른 언어의 스코프와 구별되는 특징이 있으므로 주의해야한다.</p>\n<p>아래 코드를 보면 마지막 줄에서 레퍼런스 에러가 발생하는 데, 이유는 <code class=\"language-text\">매개변수의 스코프</code>가 <code class=\"language-text\">함수 몸체 내부</code>이기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// reference error</span></code></pre></div>\n<p>모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 **<code class=\"language-text\">선언된 위치</code>**에 따라 참조할 수 있는 범위가 결정된다.</p>\n<blockquote>\n<p><em><strong>스코프 = 식별자가 유효한 범위</strong></em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'local'</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// local</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global</span></code></pre></div>\n<p>자바스크립트 엔진은 위의 코드를 실행하면서 선언된 두 개의 x 변수 중 어떤 것을 참조할 것인지 <code class=\"language-text\">식별자를 결정</code>한다. 이때 <code class=\"language-text\">코드의 문맥(Context)</code>를 고려한다.</p>\n<blockquote>\n<p><em><strong>스코프 = 식별자를 검색할 때 사용하는 규칙</strong></em></p>\n</blockquote>\n<h3 id=\"코드의-문맥과-환경\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%9D%98-%EB%AC%B8%EB%A7%A5%EA%B3%BC-%ED%99%98%EA%B2%BD\" aria-label=\"코드의 문맥과 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 코드의 문맥과 환경</h3>\n<ul>\n<li>렉시컬 환경(lexical environment): 코드가 어디서 실행되며 주변에 어떤 코드가 있는지</li>\n<li>코드의 문맥은 렉시컬 환경으로 이루어짐</li>\n<li>이를 구현한 실제가 실행 컨텍스트(execution context), 모든 코드는 실행 컨텍스트에서 평가되고 실행됨</li>\n</ul>\n<h3 id=\"식별자\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 식별자</h3>\n<p>변수나 함수 이름, 어떤 값을 구별하여 식별해낼 수 있는 고유한 이름을 말한다.</p>\n<p>하나의 값이 유일한 식별자와 연결이 된다.</p>\n<h3 id=\"폴더의-개념\" style=\"position:relative;\"><a href=\"#%ED%8F%B4%EB%8D%94%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-label=\"폴더의 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 폴더의 개념</h3>\n<p>컴퓨터에서 파일의 이름은 식별자로 고유해야 한다. 하지만 폴더라는 개념을 통해 전체 컴퓨터에서 다른 폴더에서 파일의 이름을 중복해서 사용할 수 있다. 이 예시와 마찬가지로 자바스크립트에서는 하나의 스코프 내에서만 식별자가 유일하면 된다. 위 코드에서 두 x 변수는 이름이 동일한 식별자이지만 스코프가 다른 별개의 변수이다.</p>\n<blockquote>\n<p><em><strong>스코프 = 네임 스페이스</strong></em></p>\n</blockquote>\n<h3 id=\"var-letconst\" style=\"position:relative;\"><a href=\"#var-letconst\" aria-label=\"var letconst permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 var 🆚 let,const</h3>\n<p>var 키워드로 선언된 변수는 <code class=\"language-text\">동일 스코프 내에서 중복선언이 가능</code>하다. 이 때문에 의도치 않게 변수값이 재할당되어 변경되는 부작용이 발생할 수 있다.</p>\n<p>이에 반해, let과 const는 <code class=\"language-text\">동일 스코프 내에 중복선언을 허용하지 않는다</code>.</p>\n<h2 id=\"스코프의-종류\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"스코프의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프의 종류</h2>\n<hr>\n<table>\n<thead>\n<tr>\n<th>전역</th>\n<th>코드 가장 바깥 영역</th>\n<th>전역 스코프</th>\n<th>전역 변수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>지역</td>\n<td>함수 몸체 내부</td>\n<td>지역 스코프</td>\n<td>지역 변수</td>\n</tr>\n</tbody>\n</table>\n<p>전역 변수는 어디서든지 참조할 수 있다.</p>\n<p>지역 스코프는 자신의 지역 스코프와 하위 지역스코프 내에서 유효하다.</p>\n<h2 id=\"스코프-체인\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\" aria-label=\"스코프 체인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 체인</h2>\n<hr>\n<p>중첩함수: 함수 몸체 내부에 정의한 함수</p>\n<p>외부함수: 중첩함수를 포함하는 함수</p>\n<p>스코프는 함수의 중첩에 의해 계층적인 구조를 가진다. 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 상위 스코프로 이동하여 선언된 변수를 검색한다.</p>\n<p>⇒ 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조가 불가능 (상속과 유사하다.)</p>\n<p><code class=\"language-text\">스코프 체인</code>은 물리적인 실체로 존재한다. 자바스크립트 엔진은 코드를 실행하기 전, <code class=\"language-text\">렉시컬 환경</code>을 실제로 생성한다. <code class=\"language-text\">변수 선언</code>이 실행되면 <code class=\"language-text\">변수 식별자</code>가 <code class=\"language-text\">렉시컬 환경(자료 구조)</code>에 <code class=\"language-text\">키</code>로 등록되고, <code class=\"language-text\">변수 할당</code>이 일어나면 이 자료구조의 <code class=\"language-text\">변수 식별자에 해당하는 값을 변경</code>한다. <code class=\"language-text\">변수의 검색</code>도 이 자료구조에서 일어난다.</p>\n<h3 id=\"렉시컬-환경\" style=\"position:relative;\"><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 렉시컬 환경</h3>\n<p>스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향으로 연결한 것이다.</p>\n<ul>\n<li>전역 렉시컬 환경: 코드가 로드되면 곧바로 생성</li>\n<li>함수 렉시컬 환경: 함수가 호출되면 곧바로 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global function foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'local function foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트 엔진은 런타임 이전에 함수 이름과 동일한 이름의 식별자를 암묵적으로 선언하고 생성된 함수 객체를 할당한다. 위 코드에서 모든 함수는 함수 이름과 동일한 이름의 식별자에 할당된다.</p>\n<p>1번에서 foo를 호출하면 자바스크립트는 식별자 foo를 검색하는데, 함수도 식별자이므로 스코프를 가진다.</p>\n<p>⇒ <strong>스코프</strong>는 변수 검색에 사용하는 규칙보다는 <strong>식별자를 검색하는 규칙</strong></p>\n<h2 id=\"함수-레벨-스코프\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"함수 레벨 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 레벨 스코프</h2>\n<hr>\n<h3 id=\"블록-레벨-스코프\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"블록 레벨 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 블록 레벨 스코프</h3>\n<p>함수 몸체 뿐만 아니라 모든 코드 블록에서 지역 스코프를 만드는 특성. 대부분의 프로그래밍 언어가 이 특성을 가지고 있음</p>\n<h3 id=\"함수-레벨-스코프-1\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84-1\" aria-label=\"함수 레벨 스코프 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 함수 레벨 스코프</h3>\n<p>오직 함수의 코드블록만을 지역스코프로 인정하는 특성</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p>위 코드를 보면 <code class=\"language-text\">var 키워드</code>로 선언된 변수는 <code class=\"language-text\">함수의 코드 블록</code>만을 지역 스코프로 인정하므로 코드 블록 내에서 선언되었다 할지라도 전역 변수가 된다. var는 또한 let, const와 다르게 동일 스코프에서 중복 선언이 허용이 되므로 변수 값이 변경되는 부작용이 발생해 console.log()로 10이 출력되는 것을 확인할 수 있다.</p>\n<p><strong>let, const는 블록레벨 스코프를 지원한다.</strong></p>\n<h2 id=\"렉시컬-스코프lexical-scope\" style=\"position:relative;\"><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84lexical-scope\" aria-label=\"렉시컬 스코프lexical scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렉시컬 스코프(lexical scope)</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>함수를 어디서 호출했는지에 따라 상위 스코프 결정 ⇒ 동적 스코프</li>\n<li>함수를 어디서 정의했는지에 따라 상위 스코프 결정 ⇒ 렉시컬 스코프, 정적 스코프</li>\n</ul>\n<p>자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다.</p>\n<p>bar 함수의 상위 스코프는 전역 스코프이므로 <code class=\"language-text\">1이 두번 출력</code>된다.</p>\n<p>자바스크립트는 <code class=\"language-text\">렉시컬 스코프</code>를 따르므로 <code class=\"language-text\">함수를 어디서 정의했는지</code>에 따라 상위 스코프를 <code class=\"language-text\">정적으로</code> 결정하며 호출된 위치는 상관이 없다. <strong>함수의 상위 스코프는 언제나 자신이 정의된 스코프이다.</strong></p>\n<p>함수 정의가 실행되어 생성된 함수 객체는 결정된 상위 스코프를 기억해 함수가 호출될 때마다 기억한 상위 스코프를 참조한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84%EC%9C%A0%ED%9A%A8-%EB%B2%94%EC%9C%84\">자바스크립트의 스코프(유효 범위)</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EC%9D%98-%EB%AC%B8%EB%A7%A5%EA%B3%BC-%ED%99%98%EA%B2%BD\">📌 코드의 문맥과 환경</a></li>\n<li><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\">📌 식별자</a></li>\n<li><a href=\"#%ED%8F%B4%EB%8D%94%EC%9D%98-%EA%B0%9C%EB%85%90\">📌 폴더의 개념</a></li>\n<li><a href=\"#var-letconst\">📌 var 🆚 let,const</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84%EC%9D%98-%EC%A2%85%EB%A5%98\">스코프의 종류</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\">스코프 체인</a></p>\n<ul>\n<li><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\">📌 렉시컬 환경</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\">함수 레벨 스코프</a></p>\n<ul>\n<li><a href=\"#%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\">📌 블록 레벨 스코프</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84-1\">📌 함수 레벨 스코프</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84lexical-scope\">렉시컬 스코프(lexical scope)</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 26, 2022","title":"스코프","categories":"javascript","author":"얌얌냥이","emoji":"🔗"},"fields":{"slug":"/js-scope/"}},"prev":{"id":"d6068f8d-c908-503a-9d5f-4be1e9527ef9","html":"<h2 id=\"️문제\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\" aria-label=\"️문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>✏️</strong> 문제</h2>\n<hr>\n<p><strong>[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]</strong></p>\n<p>밤늦게 귀가할 때 안전을 위해 항상 택시를 이용하던 <code class=\"language-text\">무지</code>는 최근 야근이 잦아져 택시를 더 많이 이용하게 되어 택시비를 아낄 수 있는 방법을 고민하고 있습니다. “무지”는 자신이 택시를 이용할 때 동료인 <code class=\"language-text\">어피치</code> 역시 자신과 비슷한 방향으로 가는 택시를 종종 이용하는 것을 알게 되었습니다. “무지”는 “어피치”와 귀가 방향이 비슷하여 택시 합승을 적절히 이용하면 택시요금을 얼마나 아낄 수 있을 지 계산해 보고 “어피치”에게 합승을 제안해 보려고 합니다.</p>\n<p><img src=\"https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/715ff493-d1a0-44d8-9273-a785280b3f1e/2021_kakao_taxi_01.png\" alt=\"https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/715ff493-d1a0-44d8-9273-a785280b3f1e/2021_kakao_taxi_01.png\"></p>\n<p>위 예시 그림은 택시가 이동 가능한 반경에 있는 6개 지점 사이의 이동 가능한 택시노선과 예상요금을 보여주고 있습니다.그림에서 <code class=\"language-text\">A</code>와 <code class=\"language-text\">B</code> 두 사람은 출발지점인 4번 지점에서 출발해서 택시를 타고 귀가하려고 합니다. <code class=\"language-text\">A</code>의 집은 6번 지점에 있으며 <code class=\"language-text\">B</code>의 집은 2번 지점에 있고 두 사람이 모두 귀가하는 데 소요되는 예상 최저 택시요금이 얼마인 지 계산하려고 합니다.</p>\n<ul>\n<li>그림의 원은 지점을 나타내며 원 안의 숫자는 지점 번호를 나타냅니다.\n<ul>\n<li>지점이 n개일 때, 지점 번호는 1부터 n까지 사용됩니다.</li>\n</ul>\n</li>\n<li>지점 간에 택시가 이동할 수 있는 경로를 간선이라 하며, 간선에 표시된 숫자는 두 지점 사이의 예상 택시요금을 나타냅니다.\n<ul>\n<li>간선은 편의 상 직선으로 표시되어 있습니다.</li>\n<li>위 그림 예시에서, 4번 지점에서 1번 지점으로(4→1) 가거나, 1번 지점에서 4번 지점으로(1→4) 갈 때 예상 택시요금은 <code class=\"language-text\">10</code>원으로 동일하며 이동 방향에 따라 달라지지 않습니다.</li>\n</ul>\n</li>\n<li>예상되는 최저 택시요금은 다음과 같이 계산됩니다.\n<ul>\n<li>4→1→5 : <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code>가 합승하여 택시를 이용합니다. 예상 택시요금은 <code class=\"language-text\">10 + 24 = 34</code>원 입니다.</li>\n<li>5→6 : <code class=\"language-text\">A</code>가 혼자 택시를 이용합니다. 예상 택시요금은 <code class=\"language-text\">2</code>원 입니다.</li>\n<li>5→3→2 : <code class=\"language-text\">B</code>가 혼자 택시를 이용합니다. 예상 택시요금은 <code class=\"language-text\">24 + 22 = 46</code>원 입니다.</li>\n<li><code class=\"language-text\">A</code>, <code class=\"language-text\">B</code> 모두 귀가 완료까지 예상되는 최저 택시요금은 <code class=\"language-text\">34 + 2 + 46 = 82</code>원 입니다.</li>\n</ul>\n</li>\n</ul>\n<p>지점의 개수 n, 출발지점을 나타내는 s, <code class=\"language-text\">A</code>의 도착지점을 나타내는 a, <code class=\"language-text\">B</code>의 도착지점을 나타내는 b, 지점 사이의 예상 택시요금을 나타내는 fares가 매개변수로 주어집니다. 이때, <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code> 두 사람이 s에서 출발해서 각각의 도착 지점까지 택시를 타고 간다고 가정할 때, 최저 예상 택시요금을 계산해서 return 하도록 solution 함수를 완성해 주세요.만약, 아예 합승을 하지 않고 각자 이동하는 경우의 예상 택시요금이 더 낮다면, 합승을 하지 않아도 됩니다.</p>\n<h3 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🚨</strong> 제한사항</h3>\n<ul>\n<li>지점갯수 n은 3 이상 200 이하인 자연수입니다.</li>\n<li>지점 s, a, b는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.\n<ul>\n<li>즉, 출발지점, <code class=\"language-text\">A</code>의 도착지점, <code class=\"language-text\">B</code>의 도착지점은 서로 겹치지 않습니다.</li>\n</ul>\n</li>\n<li>fares는 2차원 정수 배열입니다.</li>\n<li>fares 배열의 크기는 2 이상 <code class=\"language-text\">n x (n-1) / 2</code> 이하입니다.\n<ul>\n<li>예를들어, n = 6이라면 fares 배열의 크기는 2 이상 15 이하입니다. (<code class=\"language-text\">6 x 5 / 2 = 15</code>)</li>\n<li>fares 배열의 각 행은 [c, d, f] 형태입니다.</li>\n<li>c지점과 d지점 사이의 예상 택시요금이 <code class=\"language-text\">f</code>원이라는 뜻입니다.</li>\n<li>지점 c, d는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.</li>\n<li>요금 f는 1 이상 100,000 이하인 자연수입니다.</li>\n<li>fares 배열에 두 지점 간 예상 택시요금은 1개만 주어집니다. 즉, [c, d, f]가 있다면 [d, c, f]는 주어지지 않습니다.</li>\n</ul>\n</li>\n<li>출발지점 s에서 도착지점 a와 b로 가는 경로가 존재하는 경우만 입력으로 주어집니다.</li>\n</ul>\n<h3 id=\"입출력-예시\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\" aria-label=\"입출력 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 입출력 예시</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>s</th>\n<th>a</th>\n<th>b</th>\n<th>fares</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6</td>\n<td>4</td>\n<td>6</td>\n<td>2</td>\n<td>[[4, 1, 10], [3, 5, 24], [5, 6, 2], [3, 1, 41], [5, 1, 24], [4, 6, 50], [2, 4, 66], [2, 3, 22], [1, 6, 25]]</td>\n<td>82</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3</td>\n<td>4</td>\n<td>1</td>\n<td>[[5, 7, 9], [4, 6, 4], [3, 6, 1], [3, 2, 3], [2, 1, 6]]</td>\n<td>14</td>\n</tr>\n<tr>\n<td>6</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>[[2,6,6], [6,3,7], [4,6,7], [6,5,11], [2,5,12], [5,3,20], [2,4,8], [4,3,9]]</td>\n<td>18</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤔</strong> 풀이 코드</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> fares</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> minPath <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    minPath<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> j<span class=\"token punctuation\">)</span> minPath<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> minPath<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  fares<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>graph<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      graph<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> weight <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      graph<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>graph<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      graph<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> weight <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      graph<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> startDst <span class=\"token operator\">=</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> aDst <span class=\"token operator\">=</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> bDst <span class=\"token operator\">=</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> dist <span class=\"token operator\">=</span> startDst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> aDst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bDst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    answer <span class=\"token operator\">=</span> answer <span class=\"token operator\">&lt;</span> dist <span class=\"token operator\">?</span> answer <span class=\"token operator\">:</span> dist<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> priority</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">push</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> priority</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 큐의 맨뒤에 넣고 맞는 자리에 올때까지 부모와 자리를 바꾼다.</span>\n    <span class=\"token keyword\">const</span> parentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> parent<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> parentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      index <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">shift</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> minNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 맨위에 있는 것이 min이다.</span>\n  <span class=\"token keyword\">const</span> lastNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제일 뒤에 있는 것을 꺼낸후 다시 재 정렬해준다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> minNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastNode<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rightIndex <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> leftNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rightNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> smallerIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> lastNode<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      smallerIndex <span class=\"token operator\">=</span> leftIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 왼쪽 노드가 적으면 왼쪽 자식 노드 가리킴</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>smallerIndex <span class=\"token operator\">&amp;&amp;</span> rightNode<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> lastNode<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      smallerIndex <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 왼쪽 자식 노드 없, 또는 우선순위 낮 => 오른쪽 자식 노드가 우선순위가 높으면 오른쪽 자식 노드 가르킴</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallerIndex <span class=\"token operator\">&amp;&amp;</span> rightNode<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">&lt;</span> leftNode<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      smallerIndex <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 오른쪽 자식노드가 왼쪽보다 우선순위 높 -> 오른쪽으로 바꿔줌</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>smallerIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// !왼쪽, 오른쪽 자식</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> smallerIndex<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> smallerIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> minNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">swap</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> graph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> distance <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  distance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> neighbors <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 인접 노드 탐색</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>neighbors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">neighborKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> alt <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> neighbors<span class=\"token punctuation\">[</span>neighborKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//시작 -> 노드 + 노드 -> 인접노드</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alt <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">[</span>neighborKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        distance<span class=\"token punctuation\">[</span>neighborKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alt<span class=\"token punctuation\">;</span>\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>neighborKey<span class=\"token punctuation\">,</span> alt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> distance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"나의-풀이과정\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\" aria-label=\"나의 풀이과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😼 나의 풀이과정</h2>\n<hr>\n<p>우선순위 큐를 활용한 다익스트라알고리즘을 사용하여 문제를 풀었습니다.</p>\n<p>최단 경로를 찾아내는 알고리즘에는 다익스트라 알고리즘, 플로이드 워셜, 벨만 포드가 있습니다.</p>\n<p>다익스트라는 하나의 정점으로부터 다른 모든 정점까지의 최단 경로를 찾아내는 알고리즘으로, BFS를 기본으로 합니다. 음수 가중치가 있는 경우에 사용할 수 없습니다. 다익스트라 알고리즘에는 시작 정점에서 다른 정점으로 가는 최단 거리를 기록하는 배열이 있어야 하고, 무한대로 초기화 합니다.  매 단계에서 방문하지 않은 정점들 중에서 가장 거리가 짧은 정점을 방문합니다. 새로운 정점이 추가되면 다른 정점들의 거리 값이 변경이 됩니다. 더 짧은 거리가 나타나거나 무한대에서 직접 경로가 생겼을 때 거리를 갱신해줍니다.</p>\n<p>다익스트라에서 우선순위 큐를 사용하면 더 빠르게 최소 경로를 찾아낼 수 있습니다. 우선순위 큐에서 최소값을 뽑아내서 검사하므로 갱신횟수가 일반 큐를 사용하는 것보다 현저히 적어집니다. 우선순위 큐를 사용하면 O(ElogV)의 시간복잡도를 가지게 됩니다. 우선순위 큐를 사용하면 방문 처리를 따로 해주지 않아도 됩니다. 기존에 기록한 최단 거리보다 크다면 이미 방문했던 노드이므로 그냥 무시하고 넘어갈 수 있습니다.</p>\n<p>이렇게 다익스트라를 사용해서 먼저 시작 위치부터 다른 위치들까지의 최소 경로를 저장하고, A부터 다른 위치들까지의 최소 경로, B부터 다른 위치들까지의 최소경로를 저장해서, A와 B가 시작점부터 합승할 위치를 1부터 N까지 경우를 생각해서 시작점부터 합승이 끝나는 위치까지의 비용, A가 내리고 혼자가는 비용, B가 내려서 혼자가는 비용을 다 더한 것이 작은 경우를 찾아냅니다.</p>\n<h2 id=\"알게된-점\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\" aria-label=\"알게된 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 알게된 점</h2>\n<hr>\n<ul>\n<li>최소 경로 알고리즘에 대해 더 자세히 공부하고, 효율성을 생각해서 자바스크립트에는 따로 존재하지 않는 우선순위를 직접 구현해볼 수 있었음</li>\n<li>왜 우선순위 큐를 사용하면 다익스트라 알고리즘을 더 빠르게 할 수 있는지 공부해볼 수 있었음</li>\n<li>이외에도 벨만 포드 알고리즘을 사용해서 모든 노드부터 다른 모든 노드들까지의 거리를 계산해서 할 수 도있지만 시간이 훨씬 오래걸릴 것으로 예상됨 ⇒ 확인을 해보니 평균적으로 우선순위 큐를 활용한 방법이 더 적게 걸리는 것을 확인할 수 있었음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%EB%AC%B8%EC%A0%9C\"><strong>✏️</strong> 문제</a></p>\n<ul>\n<li><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\"><strong>🚨</strong> 제한사항</a></li>\n<li><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%8B%9C\">📌 입출력 예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\"><strong>🤔</strong> 풀이 코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95\">😼 나의 풀이과정</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\">✨ 알게된 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 10, 2022","title":"[프로그래머스] 합승 택시 요금","categories":"algorithm","author":"얌얌냥이","emoji":"🚕"},"fields":{"slug":"/algorithm-programmers-taxi-cost/"}},"site":{"siteMetadata":{"siteUrl":"https://yumyumnyang.github.io","comments":{"utterances":{"repo":"YumYumNyang/YumYumNyang.github.io"}}}}},"pageContext":{"slug":"/algorithm-programmers-longest-palindrome/","nextSlug":"/js-scope/","prevSlug":"/algorithm-programmers-taxi-cost/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}